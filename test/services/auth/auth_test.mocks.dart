// Mocks generated by Mockito 5.0.9 from annotations
// in Postly/test/services/auth/auth_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:http/src/response.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:Postly/models/http/request.dart' as _i6;
import 'package:Postly/services/http/http.dart' as _i5;
import 'package:Postly/services/storage/simple.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeResponse extends _i1.Fake implements _i2.Response {}

/// A class which mocks [SimpleStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSimpleStorageService extends _i1.Mock
    implements _i3.SimpleStorageService {
  MockSimpleStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FutureOr<bool> putString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#putString, [key, value]),
          returnValue: Future<bool>.value(false)) as _i4.FutureOr<bool>);
  @override
  _i4.FutureOr<String?>? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key]))
          as _i4.FutureOr<String?>?);
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i5.HttpService {
  MockHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response> post(_i6.JsonRequest? request) =>
      (super.noSuchMethod(Invocation.method(#post, [request]),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i4.Future<_i2.Response>);
  @override
  _i4.Future<_i2.Response> get(_i6.JsonRequest? request) =>
      (super.noSuchMethod(Invocation.method(#get, [request]),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i4.Future<_i2.Response>);
}
